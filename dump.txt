def extract_square(image):
    image = cv.cvtColor(image, cv.COLOR_BGR2GRAY)

    (h, w) = image.shape[:2]
    (cx, cy) = (w // 2, h // 2)
    rotation_matrix = cv.getRotationMatrix2D((cx, cy), 0.15, 1.0)
    rotated_image = cv.warpAffine(image, rotation_matrix, (w, h))

    cropped_image = rotated_image[1246:3370, 645:2595]

    median_blurred_image = cv.medianBlur(cropped_image, 3)
    gaussian_blurred_image = cv.GaussianBlur(median_blurred_image, (0, 0), 6)
    sharpened_image = cv.addWeighted(median_blurred_image, 1.1, gaussian_blurred_image, -0.9, 0)

    _, thresh = cv.threshold(sharpened_image, 30, 255, cv.THRESH_BINARY)

    kernel = np.ones((2, 2), np.uint8)
    thresh = cv.erode(thresh, kernel)

    # show_image('thresh', thresh)

    edges = cv.Canny(thresh, 200, 300)
    # show_image('edges', edges)
    contours, _ = cv.findContours(thresh, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    max_area = 0

    # for i in range(len(contours)):
    #     if len(contours[i]) > 3:
    #         possible_top_left = None
    #         possible_bottom_right = None
    #
    #         for point in contours[i].squeeze():
    #             if possible_top_left is None or point[0] + point[1] < possible_top_left[0] + possible_top_left[1]:
    #                 possible_top_left = point
    #             elif possible_bottom_right is None or point[0] + point[1] > possible_bottom_right[0] + possible_bottom_right[1]:
    #                 possible_bottom_right = point
    #
    #         diff = np.diff(contours[i].squeeze(), axis=1)
    #         possible_top_right = contours[i].squeeze()[np.argmin(diff)]
    #         possible_bottom_left = contours[i].squeeze()[np.argmax(diff)]
    #
    #         if cv.contourArea(np.array([[possible_top_left], [possible_top_right], [possible_bottom_right], [possible_bottom_left]])) > max_area:
    #             max_area = cv.contourArea(np.array([[possible_top_left], [possible_top_right], [possible_bottom_right], [possible_bottom_left]]))
    #             top_left = possible_top_left
    #             top_right = possible_top_right
    #             bottom_left = possible_bottom_left
    #             bottom_right = possible_bottom_right

    width = 2025
    height = 2025

    # puzzle = np.array([top_left, top_right, bottom_right, bottom_left], dtype='float32')
    puzzle = np.array([(0, 0), (1950, 0), (1950, 2124), (0, 2124)], dtype='float32')
    destination_of_puzzle = np.array([[0, 0], [width, 0], [width, height], [0, height]], dtype='float32')

    M = cv.getPerspectiveTransform(puzzle, destination_of_puzzle)

    result = cv.warpPerspective(cropped_image, M, (width, height))
    result = cv.cvtColor(result, cv.COLOR_GRAY2BGR)
    # show_image('result', result)

    return result